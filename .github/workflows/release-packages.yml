name: Release Packages

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        type: choice
        default: patch
        options:
          - major
          - minor
          - patch
          - premajor
          - preminor
          - prepatch
          - prerelease

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci

      - name: Get changed packages
        id: changed
        run: |
          # Use conventional-commits to determine changed packages
          echo "Detecting changed packages..."
          CHANGED_PACKAGES=$(npx lerna changed --json | jq -r '.[].name')
          echo "Changed packages detected:"
          echo "$CHANGED_PACKAGES"

      - name: Build packages
        run: npm run build

      - name: Configure Git
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

      - name: Version bump based on conventional commits
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npx lerna version ${{ github.event.inputs.release_type }} --no-git-tag-version --conventional-commits --yes --no-private

      - name: Increment package.json version
        id: npm_bump
        run: |
          version=$(npm version patch -m "Increment version [skip ci]")
          echo "new_version=$version" >> $GITHUB_ENV

      - name: Update composer.json version
        id: version
        run: |
          # Read the version from lerna.json
          LERNA_VERSION=$(jq -r '.version' lerna.json)

          # Update the version in composer.json
          jq --arg version "$LERNA_VERSION" '.version = $version' composer.json > composer.json.tmp
          mv composer.json.tmp composer.json

          echo "Updated composer.json version to $LERNA_VERSION"
          
          # Save the version as an output parameter for later steps
          echo "version=$LERNA_VERSION" >> $GITHUB_OUTPUT

      - name: Commit version changes
        run: |
          # We don't want to commit changes to package-lock.json
          git checkout -- package-lock.json
          git add .
          git commit -m "chore: version bump [skip ci]"
          git push

      - name: Create Git tag
        run: |
          # Get the latest version from package.json
          VERSION=$(jq -r '.version' package.json)

          # If using independent versioning, we'll create a tag with the date
          if [ "$VERSION" = "independent" ]; then
            TAG_NAME="release-$(date +'%Y%m%d%H%M%S')"
          else
            TAG_NAME="v$VERSION"
          fi
          
          echo "Creating tag $TAG_NAME"
          git tag $TAG_NAME
          git push origin $TAG_NAME
          
          echo "Tag $TAG_NAME created and pushed successfully"

      - name: Publish packages
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          lerna publish from-package --no-private --yes